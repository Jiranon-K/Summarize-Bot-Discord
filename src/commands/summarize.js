const {
  SlashCommandBuilder,
  ActionRowBuilder,
  StringSelectMenuBuilder,
  EmbedBuilder,
  ButtonBuilder,
  ButtonStyle,
} = require("discord.js");
const googleDriveService = require("../services/googleDrive");
const { checkPermission } = require("../utils/permissions");

module.exports = {
  data: new SlashCommandBuilder()
    .setName("‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°")
    .setDescription("üìÑ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏à‡∏≤‡∏Å Google Drive ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡∏∏‡∏õ"),

  async execute(interaction) {
    if (process.env.ALLOWED_ROLES) {
      const hasPermission = await checkPermission(interaction.member);
      if (!hasPermission) {
        return interaction.reply({
          content: "‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ",
          ephemeral: true,
        });
      }
    }

    await interaction.deferReply();

    try {
      await interaction.editReply({
        content: "üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å Google Drive...",
      });

      const files = await googleDriveService.listFiles();

      if (!files || files.length === 0) {
        return await interaction.editReply({
          content:
            "üì≠ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå\n\n‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤:\n‚Ä¢ ‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå audio/video ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå\n‚Ä¢ ‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö (‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ñ‡∏±‡∏á‡∏Ç‡∏¢‡∏∞)\n‚Ä¢ Bot ‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå",
          embeds: [],
          components: [],
        });
      }

      const displayFiles = files.slice(0, 25);

      const embed = new EmbedBuilder()
        .setColor(0x5865f2)
        .setTitle("üìÅ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡∏∏‡∏õ")
        .setDescription(
          "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏Ñ‡πà‡∏∞/‡∏Ñ‡∏£‡∏±‡∏ö\n‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏•‡∏≤‡∏¢‡∏ô‡∏≤‡∏ó‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå"
        )
        .addFields(
          {
            name: `üìä ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏û‡∏ö: ${files.length} ‡πÑ‡∏ü‡∏•‡πå`,
            value:
              files.length > 25
                ? "‡πÅ‡∏™‡∏î‡∏á 25 ‡πÑ‡∏ü‡∏•‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÇ‡∏î‡∏¢ Discord)"
                : "‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏û‡∏ö",
            inline: false,
          },
          {
            name: "üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥",
            value:
              "‚Ä¢ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö\n‚Ä¢ ‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô 125MB",
          }
        )
        .setTimestamp()
        .setFooter({
          text: `‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡πÇ‡∏î‡∏¢ ${interaction.user.tag}`,
          iconURL: interaction.user.displayAvatarURL(),
        });
      const menuOptions = displayFiles.map((file) => {
        const isValidSize = googleDriveService.isFileSizeValid(file.sizeBytes);
        const emoji = file.mimeType.includes("video") ? "üé•" : "üéµ";

        let fileName = file.name;
        if (fileName.length > 80) {
          fileName = fileName.substring(0, 77) + "...";
        }

        let description = `${file.type} ‚Ä¢ ${file.size} ‚Ä¢ ${file.modifiedDate}`;
        if (!isValidSize) {
          description = `‚ö†Ô∏è ‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô 125MB ‚Ä¢ ${file.size}`;
        }

        return {
          label: fileName,
          description: description.substring(0, 100),
          value: file.id,
          emoji: emoji,
        };
      });
      const selectMenu = new StringSelectMenuBuilder()
        .setCustomId("file_select")
        .setPlaceholder("üîΩ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°")
        .setMinValues(1)
        .setMaxValues(1)
        .addOptions(menuOptions);

      const row = new ActionRowBuilder().addComponents(selectMenu);

      const cancelButton = new ButtonBuilder()
        .setCustomId("cancel_summary")
        .setLabel("‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å")
        .setStyle(ButtonStyle.Secondary)
        .setEmoji("‚ùå");

      const refreshButton = new ButtonBuilder()
        .setCustomId("refresh_files")
        .setLabel("‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä")
        .setStyle(ButtonStyle.Primary)
        .setEmoji("üîÑ");

      const buttonRow = new ActionRowBuilder().addComponents(
        refreshButton,
        cancelButton
      );

      await interaction.editReply({
        content: null,
        embeds: [embed],
        components: [row, buttonRow],
      });
    } catch (error) {
      console.error("‚ùå Error fetching files:", error);
      await interaction.editReply({
        content: `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå: ${error.message}`,
        embeds: [],
        components: [],
      });
    }
  },

  async handleFileSelect(interaction, fileId) {
    try {
      await interaction.update({
        content: "üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å...",
        embeds: [],
        components: [],
      });

      const file = await googleDriveService.getFile(fileId);
      if (!googleDriveService.isFileSizeValid(file.sizeBytes)) {
        return await interaction.editReply({
          content: `‚ùå ‡πÑ‡∏ü‡∏•‡πå "${file.name}" ‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î ${file.size} ‡∏ã‡∏∂‡πà‡∏á‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô 125MB\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å‡∏Å‡∏ß‡πà‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î`,
          embeds: [],
          components: [],
        });
      }

      const confirmEmbed = new EmbedBuilder()
        .setColor(0x00ff00)
        .setTitle("‚úÖ ‡πÑ‡∏ü‡∏•‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡πà‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•")
        .setDescription(`‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå **${file.name}**.`)
        .addFields(
          { name: "üìä ‡∏Ç‡∏ô‡∏≤‡∏î", value: file.size, inline: true },
          { name: "üéØ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó", value: file.type, inline: true }
        )
        .setFooter({
          text: `‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡πÇ‡∏î‡∏¢ ${interaction.user.tag}`,
          iconURL: interaction.user.displayAvatarURL(),
        })
        .setTimestamp();

      await interaction.editReply({
        content: "‚è≥ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå...",
        embeds: [confirmEmbed],
        components: [],
      });

      const fileSizeMB = (file.sizeBytes || 0) / (1024 * 1024);
      const estimatedMinutes = Math.max(3, Math.ceil(fileSizeMB / 3));
      const estimatedTimeRange = `${estimatedMinutes}-${
        estimatedMinutes + 2
      } ‡∏ô‡∏≤‡∏ó‡∏µ`;

      const attemptingProcessEmbed = new EmbedBuilder()
        .setColor(0x3498db)
        .setTitle("üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå")
        .setDescription(
          `‡πÑ‡∏ü‡∏•‡πå: **${file.name}**\n‡∏Ç‡∏ô‡∏≤‡∏î: **${fileSizeMB.toFixed(1)} MB**`
        )
        .addFields(
          { name: "‚è±Ô∏è ‡πÄ‡∏ß‡∏•‡∏≤‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì", value: estimatedTimeRange, inline: true },
          { name: "üîç ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", value: "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠...", inline: true }
        )
        .setFooter({
          text: `‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á ${interaction.user.tag} ‚Ä¢ ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏•‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà`,
          iconURL: interaction.user.displayAvatarURL(),
        })
        .setTimestamp();

      await interaction.editReply({
        embeds: [attemptingProcessEmbed],
        content: null,
      });

      try {
        const n8nService = require("../services/n8n");
        await n8nService.triggerWorkflow({
          fileId: file.id,
          fileName: file.name,
          fileMimeType: file.mimeType,
          fileSize: file.sizeBytes,
          channelId: interaction.channelId,
          userId: interaction.user.id,
          userName: interaction.user.tag,
          userAvatarURL: interaction.user.displayAvatarURL(),
        });

        const successHandOffEmbed = new EmbedBuilder()
          .setColor(0x28a745)
          .setTitle("‚úÖ ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
          .setDescription(
            `‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå **${file.name}** ‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡∏ú‡∏•‡∏™‡∏£‡∏∏‡∏õ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡πÑ‡∏°‡πà‡∏ä‡πâ‡∏≤ (‡∏´‡∏≤‡∏Å‡∏°‡∏µ)`
          )
          .setFooter({
            text: `‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á ${interaction.user.tag}`,
            iconURL: interaction.user.displayAvatarURL(),
          })
          .setTimestamp();

        await interaction.editReply({
          embeds: [successHandOffEmbed],
          content: null,
        });
      } catch (error) {
        console.error("‚ùå Error in n8n processing:", error);
        const errorEmbed = new EmbedBuilder()
          .setColor(0xff0000)
          .setTitle("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏õ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•")
          .setDescription(
            `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå **${file.name}** ‡πÑ‡∏õ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏î‡πâ\n**‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏:** ${
              error.message || "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏"
            }`
          )
          .setFooter({
            text: `‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á ${interaction.user.tag}`,
            iconURL: interaction.user.displayAvatarURL(),
          })
          .setTimestamp();

        await interaction.editReply({
          embeds: [errorEmbed],
          content: null,
        });
      }
    } catch (error) {
      console.error("‚ùå Error handling file selection:", error);
      const criticalErrorEmbed = new EmbedBuilder()
        .setColor(0xff0000)
        .setTitle("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á")
        .setDescription(
          `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ: ${error.message || "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏"}`
        )
        .setFooter({
          text: `‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á ${interaction.user.tag}`,
          iconURL: interaction.user.displayAvatarURL(),
        })
        .setTimestamp();
      await interaction.editReply({
        embeds: [criticalErrorEmbed],
        content: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•",
        components: [],
      });
    }
  },
  async handleRefresh(interaction) {
    await interaction.update({
      content: "üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå...",
      embeds: [],
      components: [],
    });

    try {
      const files = await googleDriveService.listFiles();

      if (!files || files.length === 0) {
        return await interaction.editReply({
          content:
            "üì≠ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå\n\n‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤:\n‚Ä¢ ‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå audio/video ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå\n‚Ä¢ ‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö (‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ñ‡∏±‡∏á‡∏Ç‡∏¢‡∏∞)\n‚Ä¢ Bot ‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå",
          embeds: [],
          components: [],
        });
      }

      const displayFiles = files.slice(0, 25);

      const embed = new EmbedBuilder()
        .setColor(0x5865f2)
        .setTitle("üìÅ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡∏∏‡∏õ (‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡πÅ‡∏•‡πâ‡∏ß)")
        .setDescription(
          "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏Ñ‡πà‡∏∞/‡∏Ñ‡∏£‡∏±‡∏ö\n‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏•‡∏≤‡∏¢‡∏ô‡∏≤‡∏ó‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå"
        )
        .addFields(
          {
            name: `üìä ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏û‡∏ö: ${files.length} ‡πÑ‡∏ü‡∏•‡πå`,
            value:
              files.length > 25
                ? "‡πÅ‡∏™‡∏î‡∏á 25 ‡πÑ‡∏ü‡∏•‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÇ‡∏î‡∏¢ Discord)"
                : "‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏û‡∏ö",
            inline: false,
          },
          {
            name: "üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥",
            value:
              "‚Ä¢ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö\n‚Ä¢ ‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô 125MB",
          }
        )
        .setTimestamp()
        .setFooter({
          text: `‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡πÇ‡∏î‡∏¢ ${interaction.user.tag}`,
          iconURL: interaction.user.displayAvatarURL(),
        });

      const menuOptions = displayFiles.map((file) => {
        const isValidSize = googleDriveService.isFileSizeValid(file.sizeBytes);
        const emoji = file.mimeType.includes("video") ? "üé•" : "üéµ";

        let fileName = file.name;
        if (fileName.length > 80) {
          fileName = fileName.substring(0, 77) + "...";
        }

        let description = `${file.type} ‚Ä¢ ${file.size} ‚Ä¢ ${file.modifiedDate}`;
        if (!isValidSize) {
          description = `‚ö†Ô∏è ‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô 125MB ‚Ä¢ ${file.size}`;
        }

        return {
          label: fileName,
          description: description.substring(0, 100),
          value: file.id,
          emoji: emoji,
        };
      });

      const selectMenu = new StringSelectMenuBuilder()
        .setCustomId("file_select")
        .setPlaceholder("üîΩ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°")
        .setMinValues(1)
        .setMaxValues(1)
        .addOptions(menuOptions);

      const row = new ActionRowBuilder().addComponents(selectMenu);

      const cancelButton = new ButtonBuilder()
        .setCustomId("cancel_summary")
        .setLabel("‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å")
        .setStyle(ButtonStyle.Secondary)
        .setEmoji("‚ùå");

      const refreshButton = new ButtonBuilder()
        .setCustomId("refresh_files")
        .setLabel("‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä")
        .setStyle(ButtonStyle.Primary)
        .setEmoji("üîÑ");

      const buttonRow = new ActionRowBuilder().addComponents(
        refreshButton,
        cancelButton
      );

      await interaction.editReply({
        content: null,
        embeds: [embed],
        components: [row, buttonRow],
      });
    } catch (error) {
      console.error("‚ùå Error refreshing files:", error);
      await interaction.editReply({
        content: `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä: ${error.message}`,
        embeds: [],
        components: [],
      });
    }
  },
};
